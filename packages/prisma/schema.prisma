// Esquema inicial de Club+ para PostgreSQL usando Prisma ORM
// Este modelo cubre usuarios, plataformas, combos, cuentas, perfiles, asignaciones, pagos, suscripciones y renovaciones

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  name         String
  phone        String?
  createdAt    DateTime  @default(now())
  combos       Combo[]
  assignments  Assignment[]
  payments     Payment[]
  subscriptions Subscription[]
}

model Platform {
  id                String    @id @default(uuid())
  name              String    @unique
  logoUrl           String?
  pricePerProfile   Float
  description       String?
  accounts          Account[]
  plan              Plan?
}

model Plan {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  price       Float
  platform    Platform  @relation(fields: [platformId], references: [id])
  platformId  String    @unique
  isActive    Boolean   @default(true)
  combos      Combo[]
}

model Combo {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  plan       Plan      @relation(fields: [planId], references: [id])
  planId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  status     ComboStatus @default(ACTIVE)
  priceFinal Float
  payments    Payment[]
  subscription Subscription?
}

enum ComboStatus {
  ACTIVE
  CANCELLED
}

model Account {
  id          String    @id @default(uuid())
  platform    Platform  @relation(fields: [platformId], references: [id])
  platformId  String
  email       String
  password    String
  status      AccountStatus @default(ACTIVE)
  profiles    Profile[]
  createdAt   DateTime  @default(now())
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

model Profile {
  id         String    @id @default(uuid())
  account    Account   @relation(fields: [accountId], references: [id])
  accountId  String
  profileName String
  status     ProfileStatus @default(AVAILABLE)
  assignments Assignment[]
}

enum ProfileStatus {
  AVAILABLE
  ASSIGNED
  BLOCKED
}

model Assignment {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  profile    Profile   @relation(fields: [profileId], references: [id])
  profileId  String
  assignedAt DateTime  @default(now())
  releasedAt DateTime?
}

model Payment {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  combo        Combo     @relation(fields: [comboId], references: [id])
  comboId      String
  amount       Float
  status       PaymentStatus
  provider     String
  reference    String
  paidAt       DateTime
}

enum PaymentStatus {
  PAID
  FAILED
  REFUNDED
}

model Subscription {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  combo        Combo     @relation(fields: [comboId], references: [id])
  comboId      String   @unique
  status       SubscriptionStatus
  startDate    DateTime
  endDate      DateTime
  renewals     Renewal[]
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  SUSPENDED
}

model Renewal {
  id              String    @id @default(uuid())
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String
  renewalDate     DateTime
  status          RenewalStatus
  notes           String?
}

enum RenewalStatus {
  SUCCESS
  FAILED
}
