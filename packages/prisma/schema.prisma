// Club+ MVP - Schema de base de datos
// Combos: 
// 1. Disney+ + HBO Max (Entretenimiento)
// 2. Disney+ + Canva Pro (Creativo)  
// 3. Disney+ + HBO Max + Canva Pro (Completo)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === MODELOS PRINCIPALES ===

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  name         String
  phone        String?
  createdAt    DateTime  @default(now())
  
  // Relaciones
  combos       Combo[]
  assignments  Assignment[]
  payments     Payment[]
  subscriptions Subscription[]
  referrals    Referral[] @relation("UserReferrals")
  referredBy   Referral[] @relation("UserReferred")
}

model Platform {
  id          String    @id @default(uuid())
  name        String    @unique // "Disney+", "HBO Max", "Canva Pro"
  logoUrl     String?
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relaciones
  accounts          Account[]
  comboPlatforms    ComboPlatform[]
}

model ComboTemplate {
  id          String    @id @default(uuid())
  name        String    @unique // "Combo Entretenimiento", "Combo Creativo", "Combo Completo"
  description String?
  price       Float?    // Precio a definir
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relaciones
  platforms   ComboPlatform[]
  combos      Combo[]
}

model ComboPlatform {
  id              String        @id @default(uuid())
  comboTemplate   ComboTemplate @relation(fields: [comboTemplateId], references: [id], onDelete: Cascade)
  comboTemplateId String
  platform        Platform      @relation(fields: [platformId], references: [id], onDelete: Cascade)
  platformId      String
  
  @@unique([comboTemplateId, platformId])
}

model Combo {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  comboTemplate   ComboTemplate @relation(fields: [comboTemplateId], references: [id])
  comboTemplateId String
  status          ComboStatus   @default(ACTIVE)
  priceFinal      Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relaciones
  payments      Payment[]
  subscription  Subscription?
  
  @@unique([userId, status], name: "one_active_combo_per_user")
}

enum ComboStatus {
  ACTIVE
  CANCELLED
  SUSPENDED
}

// === GESTIÓN DE CUENTAS Y PERFILES ===

model Account {
  id          String        @id @default(uuid())
  platform    Platform      @relation(fields: [platformId], references: [id])
  platformId  String
  email       String
  password    String        // Encriptado
  status      AccountStatus @default(ACTIVE)
  maxProfiles Int           @default(4) // Límite de perfiles por cuenta
  createdAt   DateTime      @default(now())
  
  // Relaciones
  profiles    Profile[]
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

model Profile {
  id          String        @id @default(uuid())
  account     Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   String
  profileName String
  avatarUrl   String?
  status      ProfileStatus @default(AVAILABLE)
  createdAt   DateTime      @default(now())
  
  // Relaciones
  assignments Assignment[]
}

enum ProfileStatus {
  AVAILABLE
  ASSIGNED
  BLOCKED
}

model Assignment {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String
  assignedAt  DateTime  @default(now())
  releasedAt  DateTime?
  
  @@unique([userId, profileId], name: "unique_user_profile_assignment")
}

// === PAGOS Y SUSCRIPCIONES ===

model Payment {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  combo        Combo         @relation(fields: [comboId], references: [id])
  comboId      String
  amount       Float
  currency     String        @default("MXN")
  status       PaymentStatus
  provider     String        // "stripe" | "mercadopago"
  externalId   String?       // ID del proveedor de pago
  reference    String
  metadata     Json?         // Datos adicionales del pago
  paidAt       DateTime?
  createdAt    DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

model Subscription {
  id           String             @id @default(uuid())
  user         User               @relation(fields: [userId], references: [id])
  userId       String
  combo        Combo              @relation(fields: [comboId], references: [id])
  comboId      String             @unique
  status       SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean        @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  // Relaciones
  renewals     Renewal[]
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  SUSPENDED
  PAST_DUE
}

model Renewal {
  id              String        @id @default(uuid())
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId  String
  amount          Float
  currency        String        @default("MXN")
  status          RenewalStatus
  attemptedAt     DateTime      @default(now())
  succeededAt     DateTime?
  failureReason   String?
  nextAttemptAt   DateTime?
  
  @@index([subscriptionId, status])
}

enum RenewalStatus {
  SUCCESS
  FAILED
  PENDING
  CANCELLED
}

// === SISTEMA DE REFERIDOS ===

model Referral {
  id           String    @id @default(uuid())
  referrer     User      @relation("UserReferrals", fields: [referrerId], references: [id])
  referrerId   String
  referred     User      @relation("UserReferred", fields: [referredId], references: [id])
  referredId   String
  code         String    @unique
  status       String    @default("PENDING") // PENDING, COMPLETED, EXPIRED
  reward       Float?    // Recompensa para el referrer
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  
  @@unique([referrerId, referredId])
}
